@{
  ViewBag.Title = "Singleton - wzorce projektowe";
}
<p>
  Czasami pojawia się taka sytuacja, że chcemy uzyskać tylko jedną instancję konkretnej klasy. Dla przykładu może to być klasa zajmująca się ustawieniami
  naszej aplikacji, bądź menadżer okienek. Dzięki takiej klasie możemy enkapsulować zarządzanie wewnętrznymi oraz zewnętrznymi zasobami i uzyskać do nich
  globalny dostęp.<br />
  <b>Singleton</b> jest jednym z najprostszych wzorców projektowych - najprostsza postać zawiera jedynie referencje do prywatnej instancji klasy. Przez niektórych
  jednak nazywany jest antywzorcem, ze względu na globalny dostęp do niego.

</p>

<h3>Wykorzystanie</h3>

<p>

  Wraz z tematem pojawia się temat zmiennych globalnych. Dużym problemem z Singletonem jest taki, że to taka zmienna globalna, która jest opakowana w klasę
  i uzyskuje przywilej posiadania tylko jednej instancji.
  Ze zmiennymi globalnymi jest taki problem, że w dużych projektach mogą pojawić się problemy. Jeżeli w problem jest zaszyta zmienna globalna bardzo ciężko
  zlokalizować powód problemu, dlatego odradza się korzystanie ze zmiennych globalnych. Korzystając ze zmiennych globalnych pogorszmy czytelność naszego kodu,
  a w konsekwencji możemy doprowadzić do sytuacji, że sami nie będziemy wiedzieli jak nasz kod działa. Szczególną uwagę trzeba zachować przy wykorzystaniu Singletonu
  w programach wielowątkowych.<br />
  Stąd właśnie pojawia się takie określenie - Singleton to antywzorzec. Jest to jak najbardziej subiektywne określenie, z którym można się zgadzać bądź nie. Jednak
  korzystając ze wzorca z głową, możemy stworzyć sprytne klasy, które w bardzo przystępny sposób trzymają jeden problem w jednym miejscu.

</p>

<h3>Elementy Singletonu</h3>

<ul>
  <li>
    <b>Singleton</b> - jedyna klasa wzorca. Musi zawierać prywatną i statyczną zmienną tego typu, wszystkie konstruktory również muszą być prywatne (ani zmienne, ani konstruktory nie mogą być dostępne
    na zewnątrz. Do wykorzystania singletonu można posłużyć się statyczna funkcją <b>getInstance()</b>, która będzie zwracała statyczną zmienną.
    <pre><code class="java">package pl.oazachaosu.designpatterns;
public class Singleton{
    
      private static Singleton mInstance;
      
      private Singleton(){
      
      }
      
      public static Singleton getInstance(){
        if(mInstance == null) {
          mInstance = new Singleton();
        }
        return mInstance;
      }
}</code></pre>

    Do najprostszych programów wystarczy tylko to i nic więcej. Do tego moglibyśmy dorobić zabezpieczenie przed dostępem do zmiennej w programach
    wielowątkowych, albo inicjalizacje zmiennej przy pierwszej próbie jej pobrania.
  </li>
</ul>

<h3>Komunikacja</h3>

<p>
  &emsp;Komunikacja pomiędzy klientem i obiektem nie powinno być. Singleton działa jak globalna zmienna, która nie powinna być używana, np. z powodu utrudnionego testowania i debugowania. W niektórych
  źródłach można nawet znaleźć, że <b>Singleton</b> nie jest wzorcem, lecz antywzorcem. Nie jest to do końca prawda, po prostu nie można jego nadużywać. Najlepiej jakby singleton wykonywał tylko pewne
  operacje i zwracał poza wyniki. Ewentualnie posiadał pewną pule zmiennych, które mają być dostępne w każdym miejscu.
</p>

<h3>Przykład</h3>

<ul>

  <li>
    Logger - klasa do logowania przydaje się zawsze gdy zaczynamy testować naszą aplikacje i nie możemy już korzystać z debuggera. Logowanie do pliku często
    może pomóc nam zlokalizować problem i wskazać punkt gdzie należy rozpocząć poszukiwania
  </li>

  <li>
    Klasa konfiguracyjna - konfiguracja, która zostaje wczytana z pliku albo z serwera jest dość często spotykaną praktyką. Dzięki takiemu zabiegowi możemy
    zmieniać zachowanie programu bez konieczności budowania go, wydawania wersji i całej procedury wdrożenia. W całej naszej aplikacji mogą znaleźć się miejsca
    gdzie możemy użyć ustawień konfiguracyjnych, a w takiej sytuacji <b>Singleton</b> pasuje w stu procentach.
  </li>

  <li>
    Singletonowa metoda wytwórcza - jest możliwe wykorzystanie <b>Metody wytwórczej</b> bądź <b>Fabryki abstrakcyjnej</b> wraz z <b>Singletonem</b>. Jest to pomocnicze
    jeżeli wszystkie elementy tworze przez fabryki muszą byś identyfikowane. Bez zastosowania takiej kombinacji w programie wielowątkowym istnieje możliwość stworzenie
    dwóch elementów, których identyfikatory byłyby takie same. <b>Singleton</b> zabezpiecza nas przed taką sytuacją.
  </li>

</ul>

<h3>Plusy i minusy</h3>

<p>
  Ciężko tutaj powiedzieć o jakichś wadach i zaletach. W zależności od tego jaki problem chcemy rozwiązać przy użyciu <b>Singletonu</b>, możemy uzyskać coś dobrego
  albo coś całkiem przeciwstawnego. Plusy i minusy <b>Singletonu</b> to jego cechy. Jeżeli będziemy korzystali z niego z głową, nie będziesz miał problemów. Jego nadużywaniem
  nie jest dobrym pomysłem. Jest to dość specyficzny wzorzec, który ma sens tylko w niektórych sytuacjach, a w innych nie jest do zaakceptowania.
</p>

<h3>Literatura</h3>
<ul>
  <li>Elisabeth Freeman, Eric Freeman, Bert Bates, Kathy Sierra - "Wzorce projektowe. Rusz głową!"</li>
  <li>Erich Gamma, Richard Helm, Ralph Johnson, John M. Vlissides - "Wzorce projektowe. Elementy oprogramowania obiektowego wielokrotnego użytku "</li>
</ul>
